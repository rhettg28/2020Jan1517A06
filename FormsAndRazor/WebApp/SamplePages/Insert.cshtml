@{
    Layout = "~/_Layout.cshtml";
    Page.Title = "CRUD - Insert";

    var thebutton = Request.Form["theButton"];
    var productname = "";
    var supplierid = "";
    var categoryid = "";
    var quantityperunit = "";
    var unitprice = "";
    var unitsinstock = "";
    var unitsonorder = "";
    var reorderlevel = "";
    var discontinued = "";

    //obtain the record collection (dataset) for the supplierid and categoryid
    var db = Database.Open("NWDB");
    var supplierquery = @"SELECT SupplierID, CompanyName
                         FROM Suppliers 
                         ORDER BY CompanyName";
    var categoryquery = @"SELECT CategoryID, CategoryName
                         FROM Categories 
                         ORDER BY CategoryName";
    var supplierlist = db.Query(supplierquery);
    var categorylist = db.Query(categoryquery);
}

@section banner{
    <h1>CRUD - Insert</h1>
    <blockquote class="alert alert-info">
        This form will demonstrate the create (insert) of CRUD. It will demonstrate using bootstrap text alignment for setting up
        right aligned text, default left aligned web controls and centered aligned buttons. The input controls and their label text
        controls are in a 2 column format. The submit buttons are centered on another row. Tool tips are used on the web controls as
        are placeholder prases. Try/Catch will be used to capture processing errors.
        <br /><br />
        The Products table will be maintained. It has a primary identity key. Thus, no need for a field for the primary key is required
        on this form. This form ONLY dows insert. However, if you wished to have a field to display the new primary key when it is
        created, you could create a &ltLabel&gt field for the output diplay of the primary key.
    </blockquote>
}

@if (IsPost)
{
    if (thebutton.Equals("clear"))
    {
        //empty the fields of data
        productname = "";
        supplierid = "";
        categoryid = "";
        quantityperunit = "";
        unitprice = "";
        unitsinstock = "";
        unitsonorder = "";
        reorderlevel = "";
        discontinued = "";

    }
    else
    {
        //process the entered data

        //retrieve the data within the input controls
        productname = Request.Form["ProductName"];
        supplierid = Request.Form["SupplierList"];  //input from web controls are strings
        categoryid = Request.Form["CategoryList"];
        quantityperunit = Request.Form["QuantityPerUnit"];
        unitprice = Request.Form["UnitPrice"];
        unitsinstock = Request.Form["UnitsInStock"];
        unitsonorder = Request.Form["UnitsOnOrder"];
        reorderlevel = Request.Form["ReorderLevel"];
        discontinued = Request.Form["Discontinued"];
        try
        {
            //connect to the database
            //var db = Database.Open("NWDB");

            //create the sql insert command
            var insertcommand = @"INSERT INTO Products (ProductName, SupplierID, CategoryID, QuantityPerUnit,
                        UnitPrice, UnitsInStock, UnitsOnOrder, ReorderLevel,
                        Discontinued)
                      VALUES(@0, @1, @2, @3, @4, @5, @6, @7, @8)";

            //execute the insert command
            //to execute the insert, update or delete command use .Execute()
            db.Execute(insertcommand, productname,
                        supplierid.Equals("0") ? null : supplierid,
                        categoryid.Equals("0") ? null : categoryid,
                        string.IsNullOrEmpty(quantityperunit) ? null : quantityperunit,
                        string.IsNullOrEmpty(unitprice) ? null : unitprice,
                        string.IsNullOrEmpty(unitsinstock) ? null : unitsinstock,
                        string.IsNullOrEmpty(unitsonorder) ? null : unitsonorder,
                        string.IsNullOrEmpty(reorderlevel) ? null : reorderlevel,
                        0);

            //get the identity value of the last inserted record.
            var x = db.GetLastInsertId();
            //display a success message
            <p class="col-md-12 text-center">
                <span style="color:green"><strong>New Product Added @x</strong></span>
            </p>
        }
        catch (Exception ex)
        {
            <p class="col-md-12 text-center">
                <span style="color:firebrick"><strong>Error: @ex.Message</strong></span>
            </p>
        }
    }
}
else
{
    //1st pass of the page
    //initialization of any web control on the page
}
<form id="theForm" method="post">
    <div class="row">
        <div class="col-md-6 text-right">
            <label for="ProductName">Name: </label><br />
            <label for="SupplierID">Supplier: </label><br />
            <label for="CategoryID">Category: </label><br />
            <label for="QuantityPerUnit">Qty/Unit: </label><br />
            <label for="UnitPrice">Price: </label><br />
            <label for="UnitsInStock">QoH: </label><br />
            <label for="UnitsOnOrder">QoO: </label><br />
            <label for="ReorderLevel">RoL: </label><br />
            <label for="Discontinued">Disc.: </label><br /><br />
        </div>
        <div class="col-md-6">
            <input type="text" id="ProductName" name="ProductName"
                   placeholder="enter product name" title="Product Name"
                   value="@productname" /><br />
            <select id="SupplierList" name="SupplierList">
                <option value="0" style="color:gray">select supplier...</option>
                @foreach (var item in supplierlist)
                {
                    //when the select control is created and loaded by default
                    //  the 1st option tag is shown as the selected option
                    //the value attribute should be set to the data that is required
                    //  by the record
                    //the display text is only required by the user to make the selection
                    //to retaun the previous selected value, you need to test
                    //  the previous selected value against the current item that
                    //  is being used to create the option line 
                    //Remember: the previous value is a "string" 
                    //Therefore: the current item value needs to also be a "string"
                    //if the previous selected value is == to the current item then the
                    //  option tag needs to have the attribute "selected" added to the tag
                    if (supplierid == item.SupplierID.ToString())
                    {
                        <option value="@item.SupplierID" selected>@item.CompanyName</option>
                    }
                    else
                    {
                        <option value="@item.SupplierID">@item.CompanyName</option>
                    }
                }
            </select><br />
            <select id="CategoryList" name="CategoryList">
                <option value="0" style="color:gray">select category...</option>
                @foreach (var item in categorylist)
                {
                    if (categoryid == item.CategoryId.ToString())
                    {
                        <option value="@item.CategoryID" selected>@item.CategoryName</option>
                    }
                    else
                    {
                        <option value="@item.CategoryID">@item.CategoryName</option>
                    }
                }
            </select><br />
            <input type="text" id="QuantityPerUnit" name="QuantityPerUnit"
                   value="@quantityperunit" /><br />
            <input type="text" id="UnitPrice" name="UnitPrice"
                   value="@unitprice" /><br />
            <input type="text" id="UnitsInStock" name="UnitsInStock"
                   value="@unitsinstock" /><br />
            <input type="text" id="UnitsOnOrder" name="UnitsOnOrder"
                   value="@unitsonorder" /><br />
            <input type="text" id="ReorderLevel" name="ReorderLevel"
                   value="@reorderlevel" /><br />
            <input type="checkbox" id="Discontinued" name="Discontinued"
                   @(string.IsNullOrEmpty(discontinued) ? "" : "checked") @*terenary operator*@ /> (discontinued if checked)<br />
        </div>
    </div>
    <div class="row">
        <div class="col-md-12 text-center">
            <button type="submit" name="theButton" id="theButton" value="submit"
                    class="btn btn-primary">
                Submit
            </button>&nbsp;&nbsp;
            <button type="submit" name="theButton" id="theButton" value="clear"
                    class="btn btn-light">
                Clear
            </button>
        </div>
    </div>
</form>
